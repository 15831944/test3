/*
			CvMemStorage* pStorage  = cvCreateMemStorage(0);
			CvSeq* pContour = NULL;
			cvFindContours(pDstImage, pStorage, &pContour, sizeof(CvContour), CV_RETR_CCOMP , CV_CHAIN_APPROX_SIMPLE);
			if (pContour)
			{
				CvBox2D End_Rage2D = cvMinAreaRect2(pContour);
			}
*/

/*
			cvDrawContours(pDstImage, pContour, CV_RGB(255, 255, 255), CV_RGB(255, 255, 255), 2, CV_FILLED, 8, cvPoint(0, 0));

			for (; pContour != NULL; pContour = pContour->h_next)
			{
				for (pContour = pContour->v_next; pContour != NULL; )
				{
				}
			}
*/
			
			
// 
// 			Mat result(image.size(),CV_8U,Scalar(0));
// 			drawContours(result, contours, -1, Scalar(255), 2);
// 
// 			namedWindow("Contours"); 
// 			imshow("Contours",result);
/*
			cvNamedWindow("滤波器");
			proc.SmoothProc(pDstImage, CV_GAUSSIAN, &pSmoothImage);
			cvShowImage("滤波器", pSmoothImage);

			cvNamedWindow("灰度");
			proc.GreyProc(pSmoothImage, &pGrayImage);
			cvShowImage("灰度", pGrayImage);

			cvNamedWindow("均衡化");
			proc.EqualizeHistProc(pGrayImage, &pEqualizeHistImage);
			cvShowImage("均衡化", pEqualizeHistImage);

			cvNamedWindow("二值化");
			proc.BinarizeProc(pGrayImage, 90, &pBinaryImage);
			cvShowImage("二值化", pBinaryImage);

			IplImage* img3 = cvCreateImage( cvGetSize( pBinaryImage), IPL_DEPTH_8U, 1 );  
			cvZero(img3); 
			cvNamedWindow("Test1");
			cvThin(pBinaryImage, img3, 5);
			cvShowImage("Test1", img3);


			IplImage* img4 = cvCreateImage( cvGetSize( pDstImage), IPL_DEPTH_8U, 1 ); 
			cvNamedWindow("Test2");
			cvErode(img3, img4, NULL, 1);
			cvShowImage("Test2", img4);

			IplConvKernel *iplele = cvCreateStructuringElementEx(3, 3, 0, 0, CV_SHAPE_RECT);
			cvNamedWindow("Test3");
			cvDilate(img4, img4, iplele, 1);
			cvReleaseStructuringElement(&iplele); 
			cvShowImage("Test3", img4);


			IplImage* img3_2 = cvCreateImage( cvGetSize(pDstImage), IPL_DEPTH_8U, 1 );
			cvZero(img3_2); 
			cvThin(img4, img3_2, 5);
			cvCopy(img3_2, img4);
		

			IplImage* img5 = cvCreateImage( cvGetSize(pDstImage), IPL_DEPTH_8U, 1 ); 
			cvCopy(img4, img5); 
			CvSeq *contour = NULL;
			CvMemStorage* storage = cvCreateMemStorage(0); 
			cvFindContours( img5, storage, &contour, sizeof(CvContour),CV_RETR_EXTERNAL, CV_CHAIN_APPROX_NONE);
*/



/*
			IplImage* trainTempImg=cvCreateImage(cvSize(28,28),8,3);
			cvZero(trainTempImg); 
			cvResize(pDstImage,trainTempImg);

			CvSVM svm = CvSVM();
			svm.load("HOG_SVM_DATA.xml");

			HOGDescriptor *hog=new HOGDescriptor(cvSize(28,28),cvSize(14,14),cvSize(7,7),cvSize(7,7),9); 
			vector<float>descriptors;//存放结果 
			hog->compute(trainTempImg, descriptors,Size(1,1), Size(0,0)); //Hog特征计算 

			CvMat* SVMtrainMat=cvCreateMat(1,descriptors.size(),CV_32FC1);
			int n=0;    
			for(vector<float>::iterator iter=descriptors.begin();iter!=descriptors.end();iter++)    
			{    
				cvmSet(SVMtrainMat,0,n,*iter);    
				n++;    
			} 
			char result[300]; //存放预测结果
			int ret = svm.predict(SVMtrainMat);//检测结果
			sprintf(result, "%d\r\n",ret );
			::MessageBox(NULL,result,TEXT("预测结果"),MB_OK);
*/



//			cvSmooth(src,dst_blur,CV_BLUR,3,3,0,0);         //邻域平均滤波  
//			cvSmooth(src,dst_median,CV_MEDIAN,3,3,0,0);     //中值滤波   
//			cvSmooth(src,dst_gaussian,CV_GAUSSIAN,3,3,0,0); //高斯滤波 

// 			CvMemStorage* storage = cvCreateMemStorage(0);
// 			 CvSeq* contour = 0;  
// 			cvFindContours(pBinaryImage, storage, &contour, sizeof(CvContour), CV_RETR_CCOMP, CV_CHAIN_APPROX_SIMPLE);
// 			cvNamedWindow("中性滤波");
// 			IplImage *pBlurImage = cvCreateImage(cvGetSize(pDstImage), IPL_DEPTH_8U, 1);
// 			medianBlur(pBinaryImage, pBlurImage, 3);
// 			cvShowImage("中性滤波", pBlurImage);
/*
//			pSmoothImage = cvCreateImage( cvGetSize( pDstImage), IPL_DEPTH_8U, 3 );
			cvSmooth(pDstImage, pDstImage, CV_GAUSSIAN, 5, 0);

			

			cvNamedWindow("平衡");
			IplImage *img_equaliz=cvCreateImage(cvGetSize(pDstImage),IPL_DEPTH_8U,1);
			cvEqualizeHist(pGrayImage, img_equaliz);
			cvShowImage("平衡", img_equaliz);

			cvNamedWindow("二值化");
			proc.BinarizeProc(img_equaliz, &pBinaryImage);
			cvShowImage("二值化", pBinaryImage);

			IplImage *img_thin=cvCreateImage(cvGetSize(pBinaryImage),IPL_DEPTH_8U,1);
			cvZero(img_thin);
			cvThin(pBinaryImage,img_thin,3);


			int i = 0,j = 0; 
			CvSize size = cvGetSize(img_thin); 
			for(i=0; i<size.height;  i++) 
			{ 
				for(j=0; j<size.width; j++) 
				{ 
					if(CV_IMAGE_ELEM(img_thin,uchar,i,j)==1) 
					{ 
						CV_IMAGE_ELEM(img_thin,uchar,i,j) = 0; 
					} 
					else 
					{ 
						CV_IMAGE_ELEM(img_thin,uchar,i,j) = 255; 
					} 
				} 
			}


			cvNamedWindow("showthin",1);
			cvShowImage("showthin",img_thin);

			//对图像做腐蚀处理并显示
			IplImage *img_erode_dilate = cvCreateImage(cvGetSize(pDstImage),IPL_DEPTH_8U,1);
			cvErode(pBinaryImage,img_erode_dilate,NULL,1);
			cvNamedWindow("showerode",1);
			cvShowImage("showerode",img_erode_dilate);

			 //对图像做膨胀处理并显示
			IplConvKernel *conv=cvCreateStructuringElementEx(3, 3, 0, 0, CV_SHAPE_RECT);
			cvDilate(img_erode_dilate,img_erode_dilate,conv,1);
			cvNamedWindow("showdilate",1);
			cvShowImage("showdilate",img_erode_dilate);
			cvReleaseStructuringElement(&conv);
*/
